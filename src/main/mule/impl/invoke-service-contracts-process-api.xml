<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:custom-metrics="http://www.mulesoft.org/schema/mule/custom-metrics"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/custom-metrics http://www.mulesoft.org/schema/mule/custom-metrics/current/mule-custom-metrics.xsd">
	
	<sub-flow name="service-contract-papi-callout" doc:id="6c036a91-19a5-416a-b313-17363b99463e" >
		<json-logger:logger doc:name="Logger" doc:id="a5aa5c15-7889-4d32-a452-d87581274bb7" config-ref="JSON_Logger_Config_cnb" message='#["Invoking Service Contracts PAPI request for " ++ sizeOf(payload.contracts) ++ " contracts"]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<ee:transform doc:name="Configure Payload" doc:id="6154707f-dc70-4ca7-8fe7-bc3ee190a502" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="startPayload" ><![CDATA[%dw 2.0
output application/java
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<json-logger:logger doc:name="before Service Contract" doc:id="6d702620-59e2-4a98-be3e-dc2cf5dec7f1" config-ref="JSON_Logger_Config_cnb" message='#["Before Service Contract SAPI"]'>
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{

}]]]></json-logger:content>
		</json-logger:logger>
		<try doc:name="Try Service Contract" doc:id="7d6db23c-bc78-4f16-8bac-6aca5353e2f5" >
			<ee:transform doc:name="Map Payload" doc:id="2d7c95da-52f6-4eaf-94e4-9b42bacef22e" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload.contracts map (SCMap) ->
  {
  	name: SCMap.name,  
  	startDate: SCMap.startDate, 
  	endDate: SCMap.endDate,
    integrationId: SCMap.integrationId,
    contractedEntityCUCode: SCMap.contractedEntityCUCode,
    accountId: SCMap.accountId
  }]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<until-successful maxRetries="${serviceContractsPAPI.untilsuccessful.serviceContracts.retries}" doc:name="Until Successful" doc:id="95d6c2c8-2ae9-4169-a91f-f9feef3b5e19" millisBetweenRetries="${serviceContractsPAPI.untilsuccessful.serviceContracts.frequency}">
			<http:request method="PATCH" doc:name="Request Send Service Contracts" doc:id="cc1ae5ed-abc6-46e8-b96e-83cc4703cee3" config-ref="Service_Contract_PAPI_HTTP_Request" path="/service-contracts" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[%dw 2.0
output application/json skipNullOn="everywhere"
---
payload]]]></http:body>
			<http:headers><![CDATA[#[output application/java
---
{
	"x-source-system" : "C&B"
}]]]></http:headers>
		</http:request>
		</until-successful>
			<json-logger:logger doc:name="Logger" doc:id="891f4958-e1d3-446d-b334-9047fb38202a" config-ref="JSON_Logger_Config_cnb" message='#["Successfully invoked Service Contracts PAPI request"]' tracePoint="AFTER_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    successCount: payload.successCount,
    errorCount: payload.errorCount,
    totalCount: payload.totalCount,
    errorItems: payload.errorItems
}]]]></json-logger:content>
		</json-logger:logger>
			<ee:transform doc:name="Contract Error Hospital Payload" doc:id="c8efc20b-5354-4dc0-ba24-afb4724baf0f">
			<ee:message />
			<ee:variables>
				<ee:set-variable resource="dwl/contracts-error-hospital-payload.dwl" variableName="errorHospitalPayload" />
			</ee:variables>
		</ee:transform>
			<error-handler >
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="3cc58687-a1e8-485e-881d-fec5df73f784" >
					<json-logger:logger doc:name="Logger" doc:id="995a504d-257c-4595-a470-a58a5ce67d2f" config-ref="JSON_Logger_Config_cnb" message='#["Error invoking Service Contracts PAPI request"]' tracePoint="EXCEPTION" >
						<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    
}]]]></json-logger:content>
					</json-logger:logger>
					<ee:transform doc:name="Transform Message" doc:id="ec55e3bd-ab26-491b-bb39-7458f6e11fca" >
						<ee:message >
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="errorHospitalPayload" ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json
---
payload.contracts map ((item, index) -> {
	"errorDetails": error.description,
	"dataFlow": "cnb-service-contracts-batch",
	"errorText": error.detailedDescription,
	"payload": write(item, "application/json"),
	"retryCount": 0,
	"retryFlag": false,
	"sourceSystem": "CNB",
	"status": "Retry",
	"targetSystem": "SALESFORCE"
})]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
				</on-error-continue>
			</error-handler>
		</try>
		<json-logger:logger doc:name="After Service Contracts" doc:id="bbb0cc00-8d89-4071-bdc7-53def568349f" config-ref="JSON_Logger_Config_cnb" message='#["After Service Contract SAPI"]'>
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{

}]]]></json-logger:content>
		</json-logger:logger>
		<!-- [STUDIO:"Send Success/Errors Service Contracts"]<custom-metrics:send doc:name="Send Success/Errors Service Contracts" doc:id="425c2394-9428-4383-b02c-bdffb091730d" metricName="Contracts">
			<custom-metrics:dimensions >
				<custom-metrics:dimension dimensionName="Type" value="Service_Contract" />
			</custom-metrics:dimensions>
			<custom-metrics:facts >
				<custom-metrics:fact factName="successCount" value="#[payload.successCount&#93;" />
				<custom-metrics:fact factName="errorCount" value="#[payload.errorCount&#93;" />
				<custom-metrics:fact factName="totalCount" value="#[payload.totalCount&#93;" />
			</custom-metrics:facts>
		</custom-metrics:send> [STUDIO] -->
		<json-logger:logger doc:name="Logger" doc:id="23c8f164-831b-47dd-bc3d-859d41004b7d" config-ref="JSON_Logger_Config_cnb" message="Service Contracts Error Hospital Payload">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    errorHospitalPayload: JSONLoggerModule::stringifyNonJSON(vars.errorHospitalPayload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Choice" doc:id="087f8c75-17ed-46dd-a7bb-f17bef5b6660" >
			<when expression="#[(!isEmpty(vars.errorHospitalPayload)) and (sizeOf(vars.errorHospitalPayload) &gt; 0)]" >
				<json-logger:logger doc:name="Logger" doc:id="5e3ecbcf-1515-454c-a404-00b8ead1b12b" config-ref="JSON_Logger_Config_cnb" message='#["Sending Errored Service Contract records to Error Hospital, errored records count " ++ sizeOf(vars.errorHospitalPayload)]' tracePoint="FLOW" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
				<flow-ref doc:name="Flow Reference invoke-error-hospital-impl-subflow" doc:id="e1a80589-3854-4b70-ab51-b838aed2f6b5" name="invoke-error-hospital-impl-subflow" />
			</when>
			<otherwise >
				<json-logger:logger doc:name="Logger" doc:id="b14e0108-9c6a-429f-b3f6-8e8637ecb28d" config-ref="JSON_Logger_Config_cnb" message='#["No Service Contract records to send to Error Hospital"]' tracePoint="FLOW" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="Before Contract" doc:id="eaa945e4-c28e-4dbe-8a86-dfdc3e9695a7" config-ref="JSON_Logger_Config_cnb" message='#["Before Contract SAPI"]'>
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
}]]]></json-logger:content>
		</json-logger:logger>
		<try doc:name="Try Contracts" doc:id="f7820a08-8da0-400d-bcb5-7a07294ddb15">
			<ee:transform doc:name="Map Payload" doc:id="c0efdd02-1fe6-48c0-86d2-2f146917ea95">
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
vars.startPayload.contracts map (CMap) ->
  {
  	name: CMap.name,  
  	startDate: CMap.startDate, 
  	endDate: CMap.endDate,
    integrationId: CMap.integrationId,
    accountId: CMap.accountId,
    parentAccountNumber: CMap.parentAccountNumber,
    contractStatus: if(CMap.contractStatus == "ActiveDNR") "DNR" else CMap.contractStatus,
    initialTerm: CMap.term,
    renewableTerm: CMap.renewableTerm,
    productFamily: CMap.productFamily,
    currency: CMap.currency,
    directDebit: CMap.directDebit,
    term: CMap.term
  }
  ]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<until-successful maxRetries="${serviceContractsPAPI.untilsuccessful.serviceContracts.retries}" doc:name="Until Successful" doc:id="433464ba-4c38-4426-bae0-71072cd44491" millisBetweenRetries="${serviceContractsPAPI.untilsuccessful.serviceContracts.frequency}">
				<http:request method="PATCH" doc:name="Request Send Contracts" doc:id="f413c79b-a6df-4353-afac-07963914d2ac" config-ref="Service_Contract_PAPI_HTTP_Request" path="/contracts" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
					<http:body><![CDATA[#[%dw 2.0
output application/json skipNullOn="everywhere"
---
payload]]]></http:body>
					<http:headers><![CDATA[#[output application/java
---
{
	"x-source-system" : "C&B"
}]]]></http:headers>
				</http:request>
			</until-successful>
			<json-logger:logger doc:name="Logger" doc:id="164dfc60-e580-4655-8f67-86028e7ad78d" config-ref="JSON_Logger_Config_cnb" message='#["Successfully invoked Contracts PAPI request"]' tracePoint="AFTER_REQUEST">
				<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    successCount: payload.successCount,
    errorCount: payload.errorCount,
    totalCount: payload.totalCount,
    errorItems: payload.errorItems
}]]]></json-logger:content>
			</json-logger:logger>
			<ee:transform doc:name="Contract Error Hospital Payload" doc:id="ff059f23-3350-4747-a741-d6912ec00612">
				<ee:message />
				<ee:variables>
					<ee:set-variable variableName="errorHospitalPayloadCon" ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json
var papiErrors = if(payload != null and payload.errorCount != null and payload.errorCount > 0) payload.errorItems map ((item, index) -> {
  "errorDetails": item.errorMessage default "No Error Detials Given",
  "dataFlow": "cnb-contracts-batch",
  "errorText": item.errorMessage default "No Error Text Given",
  "payload": write(item.payload, "application/json"),
  "retryCount": 0,
  "retryFlag": false,
  "sourceSystem": "CNB",
  "status": "Retry",
  "targetSystem": "SALESFORCE"
}) else []
---
flatten(papiErrors)]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<error-handler>
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="fac5b5f9-005b-4fe2-a050-1cf6491338a2">
					<json-logger:logger doc:name="Logger" doc:id="2c938514-4936-4231-9892-17b8f42ca9ec" config-ref="JSON_Logger_Config_cnb" message='#["Error invoking Contracts PAPI request"]' tracePoint="EXCEPTION">
						<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    
}]]]></json-logger:content>
					</json-logger:logger>
					<ee:transform doc:name="Transform Message" doc:id="1fb657e0-779c-460d-aac1-604829aa9d79">
						<ee:message />
						<ee:variables>
							<ee:set-variable variableName="errorHospitalPayloadCon" ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json
---
payload.contracts map ((item, index) -> {
	"errorDetails": error.description,
	"dataFlow": "cnb-contracts-batch",
	"errorText": error.detailedDescription,
	"payload": write(item, "application/json"),
	"retryCount": 0,
	"retryFlag": false,
	"sourceSystem": "CNB",
	"status": "Retry",
	"targetSystem": "SALESFORCE"
})]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
				</on-error-continue>
			</error-handler>
		</try>
		<json-logger:logger doc:name="After Contracts" doc:id="d35cd60b-9aa2-4a31-8619-2248639f328c" config-ref="JSON_Logger_Config_cnb" message='#["After Contracts PAPI"]'/>
		<!-- [STUDIO:"Send Success/Errors Contracts"]<custom-metrics:send doc:name="Send Success/Errors Contracts" doc:id="72e9b68c-5b29-4dd5-8050-082215d7fbad" metricName="Contracts">
			<custom-metrics:dimensions>
				<custom-metrics:dimension dimensionName="Type" value="Contract" />
			</custom-metrics:dimensions>
			<custom-metrics:facts>
				<custom-metrics:fact factName="successCount" value="#[payload.successCount&#93;" />
				<custom-metrics:fact factName="errorCount" value="#[payload.errorCount&#93;" />
				<custom-metrics:fact factName="totalCount" value="#[payload.totalCount&#93;" />
			</custom-metrics:facts>
		</custom-metrics:send> [STUDIO] -->
		<choice doc:name="Choice1" doc:id="40bb9ca2-bcae-4acf-b01e-759db4157341" >
			<when expression="#[(!isEmpty(vars.errorHospitalPayloadCon)) and (sizeOf(vars.errorHospitalPayloadCon) &gt; 0)]" >
				<json-logger:logger doc:name="Logger" doc:id="c6a5b0a7-4153-48e3-913e-cdc16f8dee51" config-ref="JSON_Logger_Config_cnb" message='#["Sending Errored Contract records to Error Hospital, errored records count " ++ sizeOf(vars.errorHospitalPayloadCon)]' tracePoint="FLOW" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
				<flow-ref doc:name="Flow Reference invoke-error-hospital-impl-subflow" doc:id="202de196-567f-4122-9d60-4df688e71272" name="invoke-error-hospital-impl-subflowCon" />
			</when>
			<otherwise >
				<json-logger:logger doc:name="Logger" doc:id="8fa0780d-e438-4621-a945-c9ac97a4db71" config-ref="JSON_Logger_Config_cnb" message='#["No Contract records to send to Error Hospital"]' tracePoint="FLOW" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
	
</sub-flow>
	<sub-flow name="service-contract-lines-papi-callout" doc:id="3af52068-3d1b-4ac9-a791-8fc5ab4aa15c">
		<json-logger:logger doc:name="Logger" doc:id="e6573a7d-31e8-478c-a054-4225e3af1ddb" config-ref="JSON_Logger_Config_cnb" message='#["Invoking Service Contract Lines PAPI request for " ++ sizeOf(payload) ++ " contract lines"]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<ee:transform doc:name="payload" doc:id="44d69770-6720-4aae-b584-993a09a18acc">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="startPayload"><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<json-logger:logger doc:name="Before Service Contract Lines" doc:id="043a7ae5-17df-4e99-a60a-e0fbc0dc6c24" message='#["Before Service Contract Lines"]' config-ref="JSON_Logger_Config_cnb">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{

}]]]></json-logger:content>
		</json-logger:logger>
		<try doc:name="Try Service Contract Lines" doc:id="e1302650-c13b-4883-a026-360151cc598e">
			<ee:transform doc:name="Map Payload" doc:id="73297439-bc19-45db-864a-a4a2b8200462">
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
payload map (SCLMap) -> {
    name: SCLMap.name,
    serviceContract: SCLMap.serviceContract,
    integrationID: SCLMap.integrationID,
    startDate: SCLMap.startDate,
    endDate: SCLMap.endDate,
    stockCode: SCLMap.stockCode,
    stockName: SCLMap.stockName,
    productNameNominal: SCLMap.productNameNominal,
    status: if(SCLMap.status == "Active") ("Active") else if (SCLMap.status contains "DNR") "Active" else "Dead"
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<until-successful maxRetries="${serviceContractsPAPI.untilsuccessful.serviceContractLines.retries}" doc:name="Until Successful" doc:id="d21cfc53-5125-4c08-9680-c941d03d1170" millisBetweenRetries="${serviceContractsPAPI.untilsuccessful.serviceContractLines.frequency}">
				<http:request method="PATCH" doc:name="Request Send Contract Lines" doc:id="f2fabe4e-82d5-4ebd-be82-bc3ab70bd982" config-ref="Service_Contract_PAPI_HTTP_Request" path="/service-contract-lines" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:headers><![CDATA[#[output application/java
---
{
	"x-source-system" : "C&B"
}]]]></http:headers>
		</http:request>
			</until-successful>
			<json-logger:logger doc:name="Logger" doc:id="1d21161c-63c3-48ea-b57b-8e2a960225d4" config-ref="JSON_Logger_Config_cnb" message='#["Successfully invoked Service Contract Lines PAPI request"]' tracePoint="AFTER_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    successCount: payload.successCount,
    errorCount: payload.errorCount,
    totalCount: payload.totalCount,
    errorItems: payload.errorItems
}]]]></json-logger:content>
		</json-logger:logger>
			<ee:transform doc:name="Contract Lines Error Hospital Payload" doc:id="b29e891d-6b15-421c-a9f6-301c4c0d13af">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable resource="dwl/contract-lines-error-hospital-payload.dwl" variableName="errorHospitalPayload" />
			</ee:variables>
		</ee:transform>
			<error-handler>
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="ce3449df-66b8-414e-8983-07781d124d4a">
					<json-logger:logger doc:name="Logger" doc:id="16c805fa-97fb-4424-8d7b-94e3929489de" config-ref="JSON_Logger_Config_cnb" message='#["Sending Errored records to Error Hospital"]' tracePoint="EXCEPTION">
						<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
					</json-logger:logger>
					<ee:transform doc:name="Transform Message" doc:id="53f0c1b2-6b73-4aa6-b68f-ab52eb05c1db">
						<ee:message>
						</ee:message>
						<ee:variables>
							<ee:set-variable variableName="errorHospitalPayload"><![CDATA[%dw 2.0
output application/json
---
payload map ((item, index) -> {
	"errorDetails": error.description,
	"dataFlow": "cnb-service-contract-lines-batch",
	"errorText": error.detailedDescription,
	"payload": write(item, "application/json"),
	"retryCount": 0,
	"retryFlag": false,
	"sourceSystem": "CNB",
	"status": "Retry",
	"targetSystem": "SALESFORCE"
})]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
				</on-error-continue>
			</error-handler>
		</try>
		<json-logger:logger doc:name="After Service Contract Lines" doc:id="519e8dbf-67fa-43cf-bcdf-95023eaf4ab4" config-ref="JSON_Logger_Config_cnb" message='#["After Service Contract Lines"]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{

}]]]></json-logger:content>
		</json-logger:logger>
		<!-- [STUDIO:"Send Number Of Contract Lines"]<custom-metrics:send doc:name="Send Number Of Contract Lines" doc:id="7bc66540-a3c2-45b8-9c24-c8f530f2a001" metricName="Contract_Lines">
			<custom-metrics:dimensions>
				<custom-metrics:dimension dimensionName="Type" value="Service_Contract_Line" />
			</custom-metrics:dimensions>
			<custom-metrics:facts>
				<custom-metrics:fact factName="errorCount" value="#[payload.errorCount&#93;" />
				<custom-metrics:fact factName="successCount" value="#[payload.successCount&#93;" />
				<custom-metrics:fact factName="totalCount" value="#[payload.totalCount&#93;" />
				<custom-metrics:fact factName="Total_Service_Contracts" value="#[sizeOf(payload)&#93;" />
			</custom-metrics:facts>
		</custom-metrics:send> [STUDIO] -->
		<json-logger:logger doc:name="Logger" doc:id="9d9940a5-280d-467e-acd5-a9a35ffbcf95" config-ref="JSON_Logger_Config_cnb" message="Service Contract Lines Error Hospital Payload">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    errorHospitalPayload: JSONLoggerModule::stringifyNonJSON(vars.errorHospitalPayload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Choice" doc:id="fb0b6942-bd91-4a7d-b490-2b67f2201dfd">
			<when expression="#[(!isEmpty(vars.errorHospitalPayload)) and (sizeOf(vars.errorHospitalPayload) &gt; 0)]">
				<json-logger:logger doc:name="Logger" doc:id="1eee0a91-de99-4d96-9016-1874e8fd09d3" config-ref="JSON_Logger_Config_cnb" message='#["Sending Errored records to Error Hospital, errored records count " ++ sizeOf(vars.errorHospitalPayload)]' tracePoint="FLOW">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
				<flow-ref doc:name="Flow Reference invoke-error-hospital-impl-subflow" doc:id="dabc79dd-b74e-431f-ad7d-8ff3405f7e64" name="invoke-error-hospital-impl-subflow" />
			</when>
			<otherwise>
				<json-logger:logger doc:name="Logger" doc:id="fa36b2b1-d0b8-4de7-b888-8d60f0eda6b0" config-ref="JSON_Logger_Config_cnb" tracePoint="FLOW" message='#["No records to send to Error Hospital"]'>
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="Before Asset Lines" doc:id="1422b2dc-9aa9-4ec1-9017-d58990229731" config-ref="JSON_Logger_Config_cnb" message='#["Before Asset Lines"]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{

}]]]></json-logger:content>
		</json-logger:logger>
		<try doc:name="Try Contract Lines" doc:id="91bbb709-ee39-4e8a-b2c4-4cdaa3cdf516">
			<ee:transform doc:name="Map Payload" doc:id="dcc9b164-2827-499b-a873-7ef60ab4256e">
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
vars.startPayload map (SCLMap) -> {
	//account: "SSE001" not at line level
    name: SCLMap.name,
    contract: SCLMap.serviceContract,
    integrationId: SCLMap.integrationID,
    //currencyIsoCode: Not at line level
    billingInterval:SCLMap.billingInterval,
    billingType:SCLMap.billing,
    installDate:SCLMap.startDate,
    nextBillingDate:SCLMap.nextBillingDate as Date default null,
    price:SCLMap.pricePerUnit as Number default 0,
    quantity:SCLMap.quantity,
    originalStartDate:SCLMap.startDate,
    usageEndDate:SCLMap.endDate,
    unitPriceFrequency:SCLMap.unitPriceFrequency,
    assetFamily:SCLMap.productFamily,
    //totalRenewalPrice: ???
    annualBillingPeriodValue:SCLMap.annualBillingPeriodValue as Number default 0,
    stockCode: SCLMap.stockCode,
    status: SCLMap.status 
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<json-logger:logger doc:name="Logger" doc:id="0bf56fe8-bce4-4226-b7ae-80a48078ec28" config-ref="JSON_Logger_Config_cnb" message='#["Post Lines Payload"]' />
			<until-successful maxRetries="${serviceContractsPAPI.untilsuccessful.serviceContractLines.retries}" doc:name="Until Successful" doc:id="e52b2f24-57b5-4754-abb4-739ac0f02570" millisBetweenRetries="${serviceContractsPAPI.untilsuccessful.serviceContractLines.frequency}">
				<http:request method="PATCH" doc:name="Request Send Contract Lines" doc:id="3f126534-bbaa-4246-9e3c-0bbf0dd38860" config-ref="Service_Contract_PAPI_HTTP_Request" path="/assets" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
					<http:headers><![CDATA[#[output application/java
---
{
	"x-source-system" : "C&B"
}]]]></http:headers>
				</http:request>
			</until-successful>
			<json-logger:logger doc:name="Logger" doc:id="8217bc35-63d6-44f2-834e-8a1c49f7d746" config-ref="JSON_Logger_Config_cnb" message='#["Successfully invoked Service Contract Lines PAPI request"]' tracePoint="AFTER_REQUEST">
				<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    successCount: payload.successCount,
    errorCount: payload.errorCount,
    totalCount: payload.totalCount,
    errorItems: payload.errorItems
}]]]></json-logger:content>
			</json-logger:logger>
			<ee:transform doc:name="Contract Lines Error Hospital Payload" doc:id="48c83794-cc32-4be1-8774-f536d6657459">
				<ee:message />
				<ee:variables>
					<ee:set-variable variableName="errorHospitalPayloadCon"><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json

var papiErrors = if(payload != null and payload.errorCount != null and payload.errorCount > 0) payload.errorItems map ((item, index) -> {
	"errorDetails": item.errorMessage,
  "dataFlow": "cnb-contract-lines-batch",
  "errorText": item.errorMessage,
  "payload": write(item.payload, "application/json"),
  "retryCount": 0,
  "retryFlag": false,
  "sourceSystem": "CNB",
  "status": "Retry",
  "targetSystem": "SALESFORCE"
}) 
else []
---
if(!isEmpty(vars.errorHospitalPayloadCon))
	vars.errorHospitalPayloadCon
else
	flatten(papiErrors)]]></ee:set-variable>
				
</ee:variables>
			</ee:transform>
			<error-handler>
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="bcc23dd3-dfa2-4fd1-b0c1-ce33bc581c81">
					<json-logger:logger doc:name="Logger" doc:id="45c0c935-03ba-4d70-a0c8-77a8e115571a" config-ref="JSON_Logger_Config_cnb" message='#["Sending Errored records to Error Hospital"]' tracePoint="EXCEPTION">
						<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
					</json-logger:logger>
					<ee:transform doc:name="Transform Message" doc:id="162a0b1c-d0ee-4f0d-afa4-c30eefb9184b">
						<ee:message />
						<ee:variables>
							<ee:set-variable variableName="errorHospitalPayloadCon"><![CDATA[%dw 2.0
output application/json
---
payload map ((item, index) -> {
	"errorDetails": error.description,
	"dataFlow": "cnb-contract-lines-batch",
	"errorText": error.detailedDescription,
	"payload": write(item, "application/json"),
	"retryCount": 0,
	"retryFlag": false,
	"sourceSystem": "CNB",
	"status": "Retry",
	"targetSystem": "SALESFORCE"
})]]></ee:set-variable>
						
</ee:variables>
					</ee:transform>
				</on-error-continue>
			</error-handler>
		</try>
		<json-logger:logger doc:name="After Assets" doc:id="88ded9a2-0dc4-465f-a4c4-33b15bdf955d" config-ref="JSON_Logger_Config_cnb" message='#["After assets"]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{

}]]]></json-logger:content>
		</json-logger:logger>
		<!-- [STUDIO:"Send Number Of Asset Lines"]<custom-metrics:send doc:name="Send Number Of Asset Lines" doc:id="e97fc4bd-f844-493c-a23c-7673721821de" metricName="Contract_Lines">
			<custom-metrics:dimensions>
				<custom-metrics:dimension dimensionName="Type" value="Asset" />
			</custom-metrics:dimensions>
			<custom-metrics:facts>
				<custom-metrics:fact factName="errorCount" value="#[payload.errorCount&#93;" />
				<custom-metrics:fact factName="successCount" value="#[payload.successCount&#93;" />
				<custom-metrics:fact factName="totalCount" value="#[payload.totalCount&#93;" />
				<custom-metrics:fact factName="totalPayloadSize" value="#[sizeOf(payload)&#93;" />
			</custom-metrics:facts>
		</custom-metrics:send> [STUDIO] -->
		<choice doc:name="Choice1" doc:id="2cdc0143-67a5-44bf-874b-59be0a58a054">
			<when expression="#[(!isEmpty(vars.errorHospitalPayloadCon)) and (sizeOf(vars.errorHospitalPayloadCon) &gt; 0)]">
				<json-logger:logger doc:name="Logger" doc:id="b4c48618-3d31-44d3-a3b0-5ed363dca01a" config-ref="JSON_Logger_Config_cnb" message='#["Sending Errored Contract records to Error Hospital, errored records count " ++ sizeOf(vars.errorHospitalPayload)]' tracePoint="FLOW">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
				<flow-ref doc:name="Flow Reference invoke-error-hospital-impl-subflow" doc:id="ad089a83-3fc9-47e7-96de-d42bef74302c" name="invoke-error-hospital-impl-subflowCon" />
			</when>
			<otherwise>
				<json-logger:logger doc:name="Logger" doc:id="5c4a32d1-9a31-4ff4-b9a6-26362b3ed9f3" config-ref="JSON_Logger_Config_cnb" message='#["No Contract records to send to Error Hospital"]' tracePoint="FLOW">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
	
</sub-flow>
	</mule>
